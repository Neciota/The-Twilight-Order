@using TheTwilightOrder.Client.Services.Interfaces;
@using TheTwilightOrder.Shared.Models.Game;
@inject IGameService GameService

@if (_state is not null)
{
    <div @onwheel="OnScroll"
         @onmousemove="OnMove"
         class="map"
         width="@(MAP_WIDTH)px"
         height="@(MAP_HEIGHT)px"
         style="transform: scale(@_zoomDepth) translate(@(_zoomX)px, @(_zoomY)px); transform-origin: top left;">
        <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="@(MAP_WIDTH)px" height="@(MAP_HEIGHT)px" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" xmlns:xlink="http://www.w3.org/1999/xlink">
            <rect width="100%" height="100%" fill="#7fcdff" />
            @foreach (Country country in _state.Countries.Values)
            {
                <CountryDisplay Country="country" />
            }
            @foreach (Country country in _state.Countries.Values)
            {
                @foreach (string neighbor in country.Neighbors)
                {
                    // Only render the line if it wasn't rendered by a previous country
                    if (neighbor.CompareTo(country.Code) > 0)
                    {
                        Country targetCounty = _state.Countries[neighbor];
                        @if (country.InvertLineRender(targetCounty) && country.CenterX > targetCounty.CenterX)
                        {
                            // Countries are on the Pacific
                            // Country is on the east side of the map
                            // TargetCountry is on the west side of the map
                            <line x1="@country.CenterX"
                                  y1="@country.CenterY"
                                  x2="@(targetCounty.CenterX + country.CenterX)"
                                  y2="@targetCounty.CenterY"
                                  stroke="black"
                                  stroke-width="4px" />
                            <line x1="@targetCounty.CenterX"
                                  y1="@targetCounty.CenterY"
                                  x2="@(-country.CenterX)"
                                  y2="@country.CenterY"
                                  stroke="black"
                                  stroke-width="4px" />
                        }
                        else if (country.InvertLineRender(targetCounty))
                        {
                            // Countries are on the Pacific
                            // Country is on the west side of the map
                            // TargetCountry is on the east side of the map
                            <line x1="@country.CenterX"
                                  y1="@country.CenterY"
                                  x2="@(-targetCounty.CenterX)"
                                  y2="@targetCounty.CenterY"
                                  stroke="black"
                                  stroke-width="4px" />
                            <line x1="@targetCounty.CenterX"
                                  y1="@targetCounty.CenterY"
                                  x2="@(country.CenterX + targetCounty.CenterX)"
                                  y2="@country.CenterY"
                                  stroke="black"
                                  stroke-width="4px" />
                        }
                        else
                        {
                            // Countries do not render across the pacific
                            <line x1="@country.CenterX"
                                  y1="@country.CenterY"
                                  x2="@targetCounty.CenterX"
                                  y2="@targetCounty.CenterY"
                                  stroke="black"
                                  stroke-width="4px" />
                        }
                    }
                }
                @if (!country.IsPlayer)
                {
                    <InfluenceDisplay Country="country" />
                }
            }
        </svg>
    </div>
}

@code {
    private const double MIN_ZOOM = 0.34;
    private const double MAX_ZOOM = 1.2;
    private const double ZOOM_DELTA = 0.04;

    private const int MAP_HEIGHT = 2048;
    private const int MAP_WIDTH = 5632;

    private State? _state;
    private double _zoomDepth = MIN_ZOOM;
    private double _zoomX = 0.0;
    private double _zoomY = 0.0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _state = await GameService.GetGameStateAsync();
    }

    private void OnScroll(WheelEventArgs e)
    {
        _zoomDepth += e.DeltaY > 0 ? -ZOOM_DELTA : ZOOM_DELTA;
        _zoomDepth = Math.Clamp(_zoomDepth, MIN_ZOOM, MAX_ZOOM);

        //TODO: Prevent zoom from taking the map out of bounds.
        double relativeX = e.OffsetX - MAP_WIDTH / 2f;
        double relativeY = e.OffsetY - MAP_HEIGHT / 2f;
        double adjustedW = _zoomDepth * MAP_WIDTH;
        double adjustedH = _zoomDepth * MAP_HEIGHT;
        //_zoomX = relativeX * 2 > adjustedW ? 0 : relativeX;
        //_zoomY = relativeY > adjustedH ? 0 : relativeY;

        Console.WriteLine($"({_zoomDepth}) - ({_zoomX}, {_zoomY})");
    }

    private void OnMove(MouseEventArgs e)
    {
        if (e.Buttons % 2 == 0)
            return;

        //TODO: Prevent movement from taking the map out of bounds.
        _zoomX += e.MovementX;
        _zoomY += e.MovementY;
    }
}
